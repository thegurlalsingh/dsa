class Solution {
public:
    int spreadMalware(int currNode,int removedNode,vector<bool>& visited,vector<vector<int>>& graph){
        visited[currNode]=true;
        int infected=1;
        for(int adjNode=0;adjNode<graph.size();adjNode++){
            if(graph[currNode][adjNode]==1 && adjNode!=removedNode && !visited[adjNode]){
                infected+=spreadMalware(adjNode,removedNode,visited,graph);
            }
        }
        return infected;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int minInfected=INT_MAX;
        int ansNode=0;
        for(auto removedNode: initial){
            int totalInfected=0;
            vector<bool> visited(graph.size(),false);
            for(auto infectedNode : initial){
                if(removedNode!=infectedNode && !visited[infectedNode]) totalInfected+=spreadMalware(infectedNode,removedNode,visited,graph);
            }
            if(totalInfected<=minInfected){
                if(totalInfected==minInfected){
                    ansNode=min(ansNode,removedNode);
                }
                else ansNode=removedNode;
                minInfected=totalInfected;
            }
        }
        return ansNode;
        
    }
};