class Solution {

class DisjointSet {
public:
    vector<int> parent, size;
    DisjointSet(int n) {
        parent.resize(n+1);
        size.resize(n+1);
        for(int i=0; i<n; i++){
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findUPar(int node) {
        if(node == parent[node]) return node;
        return parent[node] = findUPar(parent[node]);
    }

    void UnionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if(ulp_u == ulp_v) return;

        if(size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        } else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};

public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        DisjointSet ds(n+1);

        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++) {
                if(graph[i][j] == 1 && i!=j)  {
                    ds.UnionBySize(i, j);
                }
            }
        }

        unordered_map<int,int> cnt;
        for(auto it : initial) {
            cnt[ds.findUPar(it)]++;
        }

        int ans = INT_MAX;
        int size = 0;
        int te = INT_MAX;
        for(auto it : initial) {
            te = min(te, it);
            if(cnt[ds.findUPar(it)] == 1) {
                if(ds.size[ds.findUPar(it)] > size) {
                    size = ds.size[ds.findUPar(it)];
                    ans = it; 
                } 
                else if (ds.size[ds.findUPar(it)] == size) ans = min(ans, it);
            }
        }

        return ans == INT_MAX ? te : ans;
    }
};